DROP DATABASE IF EXISTS GotCrewmates;
CREATE DATABASE GotCrewmates;
USE GotCrewmates;

DROP TABLE IF EXISTS PostStatus;
CREATE TABLE PostStatus (
	StatusID INT NOT NULL CONSTRAINT PK_StatusID PRIMARY KEY,
	Status VARCHAR(20) NOT NULL UNIQUE
);

INSERT INTO PostStatus (StatusID, Status)
VALUES 
	(1, 'Active'),
	(2, 'Inactive'),
	(3, 'Full');

DROP TABLE IF EXISTS Users;
CREATE TABLE Users (
	UserID SERIAL CONSTRAINT PK_UserID PRIMARY KEY,
	Username VARCHAR(25) NOT NULL UNIQUE,
	Hash CHAR(60) NOT NULL
);

DROP TABLE IF EXISTS Postings;
CREATE TABLE Postings (
	PostID SERIAL CONSTRAINT PK_PostID PRIMARY KEY,
	PostCreator INT NOT NULL CONSTRAINT FK_Postings_User_PostCreator REFERENCES Users(UserID),
	Title VARCHAR(50) NOT NULL,
	PostBody VARCHAR(1000) NOT NULL,
	NumberOfSpots INT NOT NULL,
	Status INT DEFAULT 1 NOT NULL CONSTRAINT FK_Postings_PostStatus_Status REFERENCES PostStatus(StatusID)
);

DROP TABLE IF EXISTS Tags;
CREATE TABLE Tags (
	TagID SERIAL CONSTRAINT PK_TagID PRIMARY KEY,
	TagName VARCHAR(50)
);

DROP TABLE IF EXISTS Groups;
CREATE TABLE Groups (
	GroupID SERIAL CONSTRAINT PK_GroupID PRIMARY KEY,
	PostID INT,
	UserID INT,
    CONSTRAINT FK_Groups_Postings_Post FOREIGN KEY (PostID) REFERENCES Postings(PostID),
    CONSTRAINT FK_Groups_Users_User FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

DROP TABLE IF EXISTS PostingTags;
CREATE TABLE PostingTags (
	PostingTagID SERIAL CONSTRAINT PK_PostingTagID PRIMARY KEY,
	PostID INT,
	TagID INT,
    CONSTRAINT FK_PostingTags_Postings_Post FOREIGN KEY (TagID) REFERENCES Tags(TagID),
    CONSTRAINT FK_PostingTags_Tags_Tag FOREIGN KEY (PostID) REFERENCES Postings(PostID)
);